plugins {
    id 'java'
    id 'org.springframework.boot' version '3.1.5'
    id 'io.spring.dependency-management' version '1.1.3'
    id 'com.github.node-gradle.node' version '3.0.1'
}

group = 'project'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = JavaVersion.VERSION_17
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    // Spring Boot starters
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-security'

    // JWT
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    implementation 'io.jsonwebtoken:jjwt-impl:0.11.5'
    implementation 'io.jsonwebtoken:jjwt-jackson:0.11.5'

    // Mailjet client
    implementation 'com.mailjet:mailjet-client:5.2.5'

    // Database migration
    implementation 'org.flywaydb:flyway-core'

    // Lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // MapStruct
    implementation 'org.mapstruct:mapstruct:1.4.2.Final'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.4.2.Final'

    // Jackson
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.15.2'
    implementation 'com.fasterxml.jackson.module:jackson-module-kotlin:2.14.2'

    // PostgreSQL driver
    runtimeOnly 'org.postgresql:postgresql'

    // Spring Boot test
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    // Swagger
    implementation group: 'org.springdoc', name: 'springdoc-openapi-starter-webmvc-ui', version: '2.0.3'
    implementation group: 'org.springdoc', name: 'springdoc-openapi-ui', version: '1.6.15'

    // JSON
    implementation 'org.json:json:20210307'
}

node {
    version = '14.17.0'
    npmVersion = '6.14.13'
    download = true
}

tasks.register('buildFrontend', Exec) {
    dependsOn 'npmInstallFrontend'
    commandLine 'cmd', '/c', 'npmBuild'
    workingDir = file('../sae-bo-front')
}

tasks.register('npmInstallFrontend', Exec) {
    dependsOn 'nodeSetup'
    commandLine 'cmd', '/c', 'npmInstall'
    workingDir = file('../sae-bo-front') // Assurez-vous que le chemin est correct
}

tasks.named('npmInstall').configure {
    dependsOn 'npmInstallFrontend'
}

tasks.register('moveFrontendResources', Copy) {
    dependsOn buildFrontend
    from '../sae-bo-front/dist'
    into 'src/main/resources/static'
}